function[vals]=bj_2target_psycho_EV_v3_mex(file_of_int,sampleContrast,testContrast,session,conditions)
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%This version is used on dual-quad core processor, calls the mex version of
%Nlx2MatEV_v4, Mat2NlxEV.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Version 1 was written by Xing on 18/03/10, modified from previous function,
%'blanco_2target_psycho_NLX' dating from 25/01/10, which was modified from 
%previous function, 'blanco_2target_psycho' dating from 30/10/09.
%Version 2 written on 22/03/10 to read NLX encoding of NumRandRew, an additional
%parameter which occurs during rewarded trials only. In version 2,
%length(encode_arr)==39 for correct saccade trials, but
%length(encode_arr)==37 for distractor saccade trials.
%In version 1, length(encode_arr) was always 37.
%Version 3 takes a 4th input arg, 'session,' and prints it on the graphs
%generated.


%Usage: 
%NAME= Filename to analyse
%For analysing performance with presentation of a fixation point.
%Timing files used for Cortex programmes include gabornlx.stt and any of 
%the perceptual learning contrast discrimination tasks, using gabor stimuli,
%e.g. pl23.stt and easy.stt.
%Reads data file from training session and calculates performance
%over time, for each condition.
%Use the variable 'sizebin' to adjust number of trials into which entire
%session is divided, eg. size of 500 gives ~2000/500= ~4 quarters.
%Set sizebin=trial to calculate performance averaged across all trials
%across 1 session.

% % encode(10001+cond_no)
% % encode(25000+sample_time)
% % encode(26000+response_time)	
% % encode(START_EYE_DATA) 		100: put_eye_data_in_buf(ON)                
% % encode(TURN_FIXSPOT_ON)     fix spot on
% % encode(STIM1_ON)            sample on
% % encode(STIM1_OFF)           sample off
% % encode(STIM2_ON)            test on
% % encode(STIM2_OFF)           test off
% % encode(STIM3_ON)            targets on
% % encode(FIX_COL_CHANGE)      fix spot colour change
% % encode(FIXATION_OCCURS)     fixation begins
% % encode(SACCADE_CORR)        correct saccade
% % encode(FIX_BREAK)           fixation break
% % encode(SACCADE_DIST)        incorrect saccade to distractor
% % encode(SACCADE_TEST)        incorrect saccade to test
% % encode(END_EYE_DATA)        101
% % encode(320+num_rand_rew)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

writeWeibullPsycho=0;%remember to set correct directory!
writeMatPsycho=1;

%codes listed in CX_CODES.STT:
     PARAMBASE              =10000;
     TRIALPARAM_START       =300;
     TRIALPARAM_END         =301;
     STIMPARAM_START        =302;
     STIMPARAM_END          =303;
     STIM_SWITCH            =304;
     REWARDPARAM_START      =305;
     REWARDPARAM_END        =306;
     STIM1_ON               =307; %sample
     STIM1_OFF              =308;
     STIM2_ON               =309; %test
     STIM2_OFF              =310;
     STIM3_ON               =311; %targets
     FIX_COL_CHANGE         =312;
     SACCADE_CORR           =313;
     SACCADE_DIST           =314;
     SACCADE_TEST           =315;
     FIX_BREAK              =316;
     REW_NUM_BASE           =320;
     SACCADE_ONSET          =5006;

     NLX_TRIAL_START      =255;    
     NLX_RECORD_START      =2;    
     NLX_SUBJECT_START     =4;   
     NLX_STIM_ON           =8;    
     NLX_STIM_OFF          =16;    
     NLX_TEST_ON           =102;
     NLX_TEST_OFF          =103;
     NLX_SUBJECT_END       =32;    
     NLX_RECORD_END        =64;   
     NLX_TRIAL_END        =254;
     NLX_FIX_BREAK         =39;
     NLX_TARGET_ON         =40;    
     NLX_TARGET_OFF        =41;    
     NLX_FIX_COL_CHANGE        =42;
     NLX_SACCADE_CORR          =43;
     NLX_SACCADE_ERROR         =44;
     NLX_SACCADE_TEST          =45;
     NLX_REW_NUM               =46;
     NLX_FIX_SPOT_ON           =59;
     NLX_FIX_START             =60;

     NLX_TESTDIMMED        =17;
     NLX_DISTDIMMED        =18;
     NLX_BARRELEASED       =19;
     NLX_CUE_ON             =20;
     NLX_CUE_OFF        	=21;
     NLX_EVENT_1        =9; 
     NLX_EVENT_2        =10;
     NLX_EVENT_3        =11;
     NLX_EVENT_4        =12;
     NLX_EVENT_5        =13;
     NLX_EVENT_6        =14;
     NLX_EVENT_7        =15;

     NLX_READ_DATA        =128;

%condition parameter encodes (send as 1 bytes) 
     NLX_TRIALPARAM_START =253; 
     NLX_TRIALPARAM_END   =252; 
%Stimparameter encodes (send as 2 bytes) 
     NLX_STIMPARAM_START =251; 
     NLX_STIMPARAM_END   =250; 
 
 %codes listed in ENCODES.H:
	REWARD					 					=3;  
	FIXATION_OCCURS					 		    =8;  
	START_INTER_TRIAL					 		=9;  
	END_INTER_TRIAL					 		    =10; 
	START_WAIT_FIXATION					     	=11; 
	END_WAIT_FIXATION					 		=12; 
	START_PRE_TRIAL					 	    	=15; 
	END_PRE_TRIAL					 			=16; 
	START_POST_TRIAL					 		=17; 
	END_POST_TRIAL					 			=18; 
	TURN_FIXSPOT_ON					 		    =35; 
    START_EYE_DATA								=100;
	END_EYE_DATA								=101;

% [time_arr,event_arr,eog_arr,header,trial]=readcort(NAME);
% sampleContrast=30;
% testContrast=[10 15 20 25 27 28 29 31 32 33 35 40 50 60];
% testContrast=[10 15 20 25 27 29 31 33 35 40 50 60];
numconds=length(testContrast);
% conditions=1:numconds;
NAME=file_of_int;

[TimeStamps, EventIDs, Nttls, Extras, EventStrings, Header] =Nlx2MatEV('Events.Nev', [1 1 1 1 1],1,1,1);
onfile=sprintf('%s on',file_of_int);
onfile2=sprintf('on');
on_time=[];
off_time=[];
offfile=sprintf('%s off',file_of_int);
for j=1:length(EventStrings)
    prl=EventStrings(j);
    if strcmp(prl,onfile)%look for keyboard entry which notes start of Cortex file writing
        on_time=TimeStamps(j);
    end
    if strcmp(prl,offfile)%look for keyboard entry which notes end of Cortex file writing
        off_time=TimeStamps(j);
    end
    k=findstr(onfile2, char(prl)); 
    if ~isempty(k) 
        prl;
    end
end
if isempty(on_time)%first value in TimeStamps
    sprintf('exact match for ON time not found,press any key to continue')
%     pause
    for j=1:length(EventStrings)
        prl=EventStrings(j);
        a=uint8(onfile);b=uint8(char(prl));
        if a(1:3)==b(1:3)
            if a(end-2:end)==b(end-2:end)%long, annoying way of comparing first and last 3 characters
                on_time=TimeStamps(j);
                sprintf('rough match for ON time found,press any key to continue')
%                 pause
            end
        end
    end
end
if isempty(off_time)
    sprintf('exact match for OFF time not found,press any key to continue')
%     pause
    for j=1:length(EventStrings)
        prl=EventStrings(j);
        a=uint8(offfile);b=uint8(char(prl));
        if a(1:3)==b(1:3)
            if a(end-2:end)==b(end-2:end)%long, annoying way of comparing first and last 3 characters
                off_time=TimeStamps(j);
                sprintf('rough match for OFF time found,press any key to continue')
%                 pause
            end
        end
    end
end
if isempty(on_time)%first value in TimeStamps
    on_time=TimeStamps(1);
end
if isempty(off_time)
    off_time=TimeStamps(end);%last value in TimeStamps
end

if session==415
on_time=TimeStamps(1);
off_time=TimeStamps(end);
end

on_time
off_time
prl2=find(TimeStamps>on_time & TimeStamps<off_time);%from 2nd to second-last value in TimeStamps
timestamps2=TimeStamps(prl2);
Nttls2=Nttls(prl2);
event_arr=zeros(100,2000);%arbitrarily large empty matrix
time_arr=zeros(100,2000);
count_resp_trials=0;
max_event_length=0;
corr_resp=zeros(1,numconds);
error_resp=zeros(1,numconds);
prl=find(Nttls2==255);%#define NLX_TRIAL_START (Alex previously set to 253, which was #define NLX_TRIALPARAM_START 253)
for k=1:length(prl)-1%look through all trials
    for j=1:numconds
        if Nttls2(prl(k)+6)==conditions(j)%condition number (Alex previously set to 4, as count started from NLX_TRIALPARAM_START instead of NLX_TRIAL_START
            encode_arr=Nttls2(prl(k):prl(k+1));%first value is 255 for start of current trial, ends with 255 of next trial
            corr_resp(1,j)=corr_resp(1,j)+length(find(encode_arr==43));%#define NLX_SACCADE_CORR
            error_resp(1,j)=error_resp(1,j)+length(find(encode_arr==44));%#define NLX_SACCADE_ERROR
            if ~isempty(find(encode_arr==43))&&length(encode_arr)==39||~isempty(find(encode_arr==44))&&length(encode_arr)==37
                count_resp_trials=count_resp_trials+1;
                if length(encode_arr)>max_event_length
                    max_event_length=length(encode_arr);
                end
                if ~(length(encode_arr)==37||length(encode_arr)==39)
                    length(encode_arr)
                end
                event_arr(1:length(encode_arr)+1,count_resp_trials)=[k encode_arr]';%each trial occupies 1 column, trial number is value in first row
                time_arr(1:length(encode_arr)+1,count_resp_trials)=[k timestamps2(prl(k):prl(k+1))]';
            end
        end
    end
end
event_arr=event_arr(1:max_event_length,1:count_resp_trials);
time_arr=time_arr(1:max_event_length,1:count_resp_trials);
% prop_corr(1:numconds/2)=error_resp(1:numconds/2)./(error_resp(1:numconds/2)+corr_resp(1:numconds/2));
% prop_corr((numconds/2)+1:numconds)=1-(error_resp((numconds/2)+1:numconds)./(error_resp((numconds/2)+1:numconds)+corr_resp((numconds/2)+1:numconds)));
% set(figure,'Name','whole session');
% plot(testContrast, prop_corr,'ok');
% hold on
% X0=[40 2];
% X= fminsearch('weibull_zero_one',X0,[],testContrast,prop_corr);
% xvals=0:1:65;
% yvals=1-exp(-((xvals/X(1)).^X(2)));
% plot(xvals,yvals,'r');
% hold off

% fig1 =  figure('Color',[1,1,1],'Units', 'Normalized', 'Position',[0.2, 0.3, 0.5, 0.5]); 
% set(fig1, 'NumberTitle', 'off', 'Name', 'fig1');
% set(fig1, 'PaperUnits', 'centimeters', 'PaperType', 'usletter', 'PaperOrientation', 'landscape', 'PaperPosition', [0.63452 0.63452 26.65 20.305]);
% clf;
trial=size(event_arr,2);
tic

vals=zeros(trial,40)-1;
%columns from 1 to 32:
    % 1	NLX_TRIAL_START
    % 2	NLX_TRIALPARAM_START
    % 3	BlockNr
    % 4	CondNr
    % 5	NLX_TRIALPARAM_END
    % 6	NLX_RECORD_START
    % 7	NLX_FIX_SPOT_ON
    % 8	NLX_FIX_START
    % 9	NLX_FIX_BREAK
    % 10	NLX_STIM_ON
    % 11	NLX_STIM_OFF
    % 12	NLX_TEST_ON
    % 13	NLX_TEST_OFF
    % 14	NLX_TARGET_ON
    % 15	NLX_FIX_COL_CHANGE
    % 16	NLX_SACCADE_CORR
    % 17	NLX_SACCADE_ERROR
    % 18	NLX_SACCADE_TEST
    % 19	NLX_RECORD_END
    % 20	NLX_REW_NUM
    % 21	NLX_TRIAL_END
    % 22	RT saccade to correct target (calculated in Matlab)
    % 23	RT saccade to distractor (calculated in Matlab)
    % 24	time between fixation and early fix break (calculated in Matlab)
    % 25	fixation held continuously (no response- calculated in Matlab)
    % 26	fix1
    % 27	sample duration
    % 28	fix2
    % 29	test duration
    % 30	fix3
    % 31	interval between targets onset & fixspot colour change
    % 32	trial duration


sizebin=trial;
% sizebin=floor(trial/4);
bins=zeros(1,floor(trial/sizebin));
for j=1:length(bins)
    bins(j)=j*sizebin;
end;
perf_bins=zeros(numconds,length(bins));%max num of trials per condition manually set to 300- adjust as needed
ndir=zeros(1,numconds);
perf=zeros(numconds,4);
trialnum=zeros(1,32);
RT=[];RT_early=[];RT_distract=[];
all_ave_RT=zeros(1,length(bins));fix1_dur=[];fix2_dur=[];fix3_dur=[];sample_dur=[];test_dur=[];fixchange_dur=[];trial_dur=[];
for k=1:length(bins)%eg.2000/50=40 bins of 50 trials, in 1 session
    trial=bins(k);
    for h=1:numconds
        correct=0;
        wrong=0;
        early=0;
        held=0;heldcheck=0;
        for i=trial-sizebin+1:trial
            %if (header(13,i)==0)
            if event_arr(8,i)==conditions(h)% condition number, test has lower contrast than sample
                vals(i,4)=conditions(h);
%             elseif ~isempty(find(event_arr(:,i)==10001+5+h))% condition
%             number, test has higher contrast than sample
%                 vals(i,1)=h;%this collapses across direction of stim colour change- can do h+5 if want to keep separate
            end
            if (vals(i,4)==conditions(h))%||(conds(i)==h+5)
                x1=find(event_arr(2:end,i)==START_PRE_TRIAL)+1;%deal with this! not included in event_arr at present
                if ~isempty(x1)
%                     vals(i,2)=time_arr(x1,i);
                end
                x1=find(event_arr(2:end,i)==NLX_TRIAL_START)+1;
                if ~isempty(x1)
                    vals(i,1)=time_arr(x1(1),i);%value in first cell of x1, as 255 is encoded two times- once for present trial, once for next
                end
                x1=find(event_arr(2:end,i)==NLX_TRIALPARAM_START)+1;%add one, because find returns value numbering from 2nd cell in event_rr, not from first
                x2=find(event_arr(2:end,i)==NLX_TRIALPARAM_END)+1;
                if ~isempty(x1)&&~isempty(x2)
                    vals(i,2)=time_arr(x1,i);%TRIALPARAM_START
                    vals(i,5)=time_arr(x2,i);%TRIALPARAM_END
                    x3=event_arr(3,i);
                    vals(i,3)=x3;
%                     x3=(find(event_arr(2:end,i)>=PARAMBASE));
%                     if length(x3)==6
%                         vals(i,5:10)=(x3-PARAMBASE)/100;%coordinates for fixspot, RF, size of fix window
%                     end
                end
                x1=find(event_arr(14:end,i)==NLX_RECORD_START)+13;
                if ~isempty(x1)
                    vals(i,6)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_FIX_SPOT_ON)+14; % find fix point onset
                if ~isempty(x1)
                    vals(i,7)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_FIX_START)+14; % find fixation start (behavioural)
                if ~isempty(x1)
                    vals(i,8)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_FIX_BREAK)+14; % find time of early fix break
                if ~isempty(x1)
                    vals(i,9)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_STIM_ON)+14; % find time of sample onset
                if ~isempty(x1)
                    vals(i,10)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_STIM_OFF)+14; % find time of sample offset
                if ~isempty(x1)
                    vals(i,11)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_TEST_ON)+14; % find time of test onset
                if ~isempty(x1)
                    vals(i,12)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_TEST_OFF)+14; % find time of test offset
                if ~isempty(x1)
                    vals(i,13)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_TARGET_ON)+14; % find time of target(s) onset
                if ~isempty(x1)
                    vals(i,14)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_FIX_COL_CHANGE)+14; % find time of fix spot colour change
                if ~isempty(x1)
                    vals(i,15)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_SACCADE_CORR)+14; % find time of saccade to correct target
                if ~isempty(x1)
                    vals(i,16)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_SACCADE_ERROR)+14; % find time of saccade to incorrect target
                if ~isempty(x1)
                    vals(i,17)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_SACCADE_TEST)+14; % find time of incorrect saccade to test
                if ~isempty(x1)
                    vals(i,18)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)==NLX_RECORD_END)+14;
                if ~isempty(x1)
                    vals(i,19)=time_arr(x1,i);
                end
                x1=find(event_arr(15:end,i)>=65)+14;
                if ~isempty(x1)
                    y1=find(event_arr(x1,i)<84);%allows up to 20 reward pulses
                    if ~isempty(y1)
                        vals(i,20)=event_arr(x1(y1),i)-65;%number of reward pulses
                    end
                end
                x1=find(event_arr(15:end,i)==NLX_TRIAL_END)+14;
                if ~isempty(x1)
                    vals(i,21)=time_arr(x1,i);
                end
                if vals(i,16)>-1 %if correct saccade occurred
                    RT=[RT vals(i,16)-vals(i,14)];%from target onset to correct saccade
                    vals(i,22)=vals(i,16)-vals(i,14);
                    correct=correct+1;
                end
                if vals(i,17)>-1
                    RT_distract=[RT_distract vals(i,17)-vals(i,14)];%from target onset to saccade to distractor 
                    vals(i,23)=vals(i,17)-vals(i,14);
                    wrong=wrong+1;
                end
                if vals(i,9)>-1
                    RT_early=[RT_early vals(i,9)-vals(i,8)];%from start of fixation (behavioural) to early fix break (reference differs from RT for correct responses)
                    vals(i,24)=vals(i,9)-vals(i,8);
                    early=early+1;
                end
                if (vals(i,8)~=-1)&&(vals(i,9)==-1)&&(vals(i,16)==-1)&&(vals(i,17)==-1)&&(vals(i,18)==-1)%fix begun but never broken
                    vals(i,25)=1;
                    held=held+1;
                end
                if (vals(i,22)>-1)%only examine times for correct trials
                    if vals(i,10)>-1%sample was turned on after spontaneous period
                        fix1_dur=[fix1_dur vals(i,10)-vals(i,8)];%from start of fixation (behavioural)TO sample onset
                        vals(i,26)=vals(i,10)-vals(i,8);
                    end
                    if vals(i,11)>-1%calculate sample duration
                        sample_dur=[sample_dur vals(i,11)-vals(i,10)];
                        vals(i,27)=vals(i,11)-vals(i,10);
                    end
                    if vals(i,12)>-1%sample-test interval
                        fix2_dur=[fix2_dur vals(i,12)-vals(i,11)];
                        vals(i,28)=vals(i,12)-vals(i,11);
                    end
                    if vals(i,13)>-1%calculate test duration
                        test_dur=[test_dur vals(i,13)-vals(i,12)];
                        vals(i,29)=vals(i,13)-vals(i,12);
                    end
                    if vals(i,14)>-1%test-target interval
                        fix3_dur=[fix3_dur vals(i,14)-vals(i,13)];
                        vals(i,30)=vals(i,14)-vals(i,13);
                    end
                    if vals(i,15)>-1%interval between target onset and fixspot colour change
                        fixchange_dur=[fixchange_dur vals(i,15)-vals(i,14)];
                        vals(i,31)=vals(i,15)-vals(i,14);
                    end
                    if vals(i,21)>-1%interval between trial start and end (not including pre-trial period)
                        trial_dur=[trial_dur vals(i,21)-vals(i,1)];
                        vals(i,32)=vals(i,21)-vals(i,1);
                    end
                end
            end
        end
        perf(h,1)=correct;
        perf(h,2)=wrong;
        perf(h,3)=early;
        perf(h,4)=held;
    end
    perf
    rew_pulse_tally=[];
    for l=1:max(vals(:,20))
        rew_pulse_tally=[rew_pulse_tally length(find(vals(:,20)==l))];
    end
    rew_pulse_tally
    %perf(:,1:2)
    percent_perf=perf(:,1)./(perf(:,1)+perf(:,2))
%     index=find(RT>=180);%optional cut-off point: Cortex code should impose limit at 180 ms
%     RT=RT(index);
%     index=find(RT<=700);%optional cut-off point: Cortex code should impose limit at 700 ms
%     RT=RT(index);
    %RT_early
    size(RT);
    max(RT);
    min(RT);
    ave_RT=mean(RT);
    all_ave_RT(k)=ave_RT;
    perf_bins(1:numconds,k)=percent_perf;
end
perf_bins%performance for each condition in each time bin
mean_perf_bins=mean(perf_bins,1)%average across conditions
all_ave_RT
durations=zeros(7,2);
durations(1,1)=mean(all_ave_RT);
durations(2,1)=mean(fix1_dur);%ave_fix1
durations(3,1)=mean(fix2_dur);%ave_fix2
durations(4,1)=mean(fix3_dur);%ave_fix3
durations(5,1)=mean(sample_dur);%ave_sample_dur
durations(6,1)=mean(test_dur);%ave_test_dur
durations(7,1)=mean(trial_dur);%ave_trial_dur
durations(1,2)=std(RT);
durations(2,2)=std(fix1_dur);
durations(3,2)=std(fix2_dur);
durations(4,2)=std(fix3_dur);
durations(5,2)=std(sample_dur);
durations(6,2)=std(test_dur);
durations(7,2)=std(trial_dur);
durations=durations./1000;
round(durations)
% figure(fig1);
% for i=1:2
%     i=1;
%     test=subplot(2,1,i);
%     test=subplot(1,1,i);
%     %if i==1
%     titletext=sprintf('%s performance',NAME);
%     set(fig1,'NumberTitle','off','Name',titletext);
%     %end;
%     x=1.5*trial/20:1:2.5*trial/20;
%     cond=[mean(perf_bins(1:numconds/2,:));mean(perf_bins(numconds/2+1:numconds,:))]
%     for j=1:2
%         line(bins,cond(j,:),'Color',[0.5*j 0.5*(2-j) 0.5*j]);hold on
%         line(x,j*0.02,'Color',[0.5*j 0.5*(2-j) 0.5*j]);hold on
%         ptext1=sprintf('%d',j+(j-1)*5);
%         text('Position',[3*trial/20 j*0.02],'FontSize',[7],'String',ptext1);
%     end
% 
%     % for j=1:numconds
%     %     line(bins,perf_bins(j,:),'Color',[0.1*(numconds-j) 0.1*j 0.1*j]);hold on
%     %     line(x,j*0.02,'Color',[0.1*(numconds-j) 0.1*j 0.1*j]);hold on
%     %     ptext1=sprintf('%d',j);
%     %     text('Position',[3*trial/20 j*0.02],'FontSize',[7],'String',ptext1);
%     % end
% end;
lowerInd=find(testContrast<sampleContrast);
lowerInd=lowerInd(end);
report_higher_contrast=[1.-perf_bins(1:lowerInd,:);perf_bins(lowerInd+1:numconds,:)];
prop_corr=report_higher_contrast';
if sizebin==trial
    set(figure,'Name','whole session');
    plot(testContrast,prop_corr,'ok');
    hold on
    X0=[30 8];
    X=fminsearch('weibull_zero_one',X0,[],testContrast,prop_corr)
    xvals=0:1:testContrast(end)+10;
    yvals=1-exp(-((xvals/X(1)).^X(2)));   
    PSE=X(1).*(-log(0.5)).^(1/X(2));
    plot(xvals,yvals,'r');
    line(sampleContrast,0:0.01:1);
    set(gca,'FontSize',[6],'YLim',[0,1.01],'XLim',[0,testContrast(end)+10],'YTickMode','manual');%'YTick',[0.1]
    % write Weibull function constants for psychometric curve to file:
    if writeWeibullPsycho==1  
        currdir=cd
%         cd 'F:\blanco\v1_2_roc_analysis_3'
%         cd 'F:\blanco\v1_roc_analysis'
%         cd 'F:\blanco\v1_2_roc_analysis_5'
        cd 'F:\blanco\v4_1_roc_analysis'
        cd 'F:\blanco\v4_2_roc_analysis'
        fid=fopen('psycho_constants','a+');
        fprintf(fid,'%d',session);
        for j=1:length(testContrast)
            fprintf(fid,' %f',prop_corr(j));
        end
        fprintf(fid,' %f %f',PSE,X(2));
        fprintf(fid,'\n');
        fclose(fid);
        chdirtext=sprintf('cd ''%s''',currdir);
        eval(chdirtext);
        cd
    end      
    if writeMatPsycho==1
%         loadText=['load ',
    end
    
    for i=1:size(perf_bins,2)
        titletext=sprintf('bin %d',i);
        set(figure,'Name',titletext);
        plot(testContrast,prop_corr(i,:),'ok');
        %plot(testContrast(1:numconds),report_higher_contrast(:,i),'LineStyle', 'none','Marker','o','MarkerSize',4);hold on
        line(sampleContrast,0:0.01:1);
        hold on
        X0=[40 2];
        X=fminsearch('weibull_zero_one',X0,[],testContrast,prop_corr(i,:))%X(2) is slope
        xvals=0:1:testContrast(end)+10;
        yvals=1-exp(-((xvals/X(1)).^X(2)));
        plot(xvals,yvals,'r');
        set(gca,'FontSize',[6],'YLim',[0,1.01],'XLim',[0,testContrast(end)+10],'YTickMode','manual');%'YTick',[0.1]
    end
end

% pause
close all

