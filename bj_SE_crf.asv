function bj_SE_crf(ch,session,test_epochs,minusSpon,matarray,animal,area)
%Written by Xing 27/09/10
%Modified from use_time_periods2, calculates average spike activity for
%each contrast level, writes values to file which compiles values across
%session for each cell. Other functions, %read_blanco_V4_1_crf_batch('F:\blanco\v4_1_crf_analysis'),
%read_blanco_V1_crf_batch('F:\blanco\v1_crf_analysis'), and
%read_blanco_V4_2_crf_batch('F:\blanco\v4_2_crf_analysis'), read the data file and
%generate contrast response functions with fminsearch.
%
%Set the parameter 'minusSpon' to 1 to subtract spontaneous firing rates:
%spontaneous levels are calculated in units of spikes/s during -150 to 0 ms
%before sample onset. Average firing rates (also in spikes/s) are
%calculated for epochs 4 and 5, and spontaneous rates are subtracted.

durSpon=150;%length of period prior to sample onset from which spontaneous rates are calculated. Can take on a value of up to 512 ms.
minTrials=10;%set value of minumum number of trials for inclusion of session

test_epochs=test_epochs{:}';
samp_epochs=test_epochs-1024;
isi_epochs=samp_epochs+512;
%             if length(test_epochs)>2
%                 samp_epochs=[0 test_epochs(2)-1024 512];
%             else
%                 samp_epochs=[0 512];
%             end
numTrials=zeros(1,14);
for cond=1:14
    numTrials(cond)=min([length(matarray{cond,1}) length(matarray{cond,4}) length(matarray{cond,5})]);
end
if min(numTrials)>=minTrials
    ave_test_act=zeros(length(test_epochs)-1,14);
    for cond=1:14
        epoch=1;
        spon_act=zeros(length(samp_epochs)-1,length(matarray{cond,epoch}));%list of average activity values from each trial
        for n=1:numTrials(cond)
            temp=find(matarray{cond,epoch}{n}<=0);
            temp=find(matarray{cond,epoch}{n}(temp)>-1*durSpon);
            spon_act(1,n)=length(temp)*1000/durSpon;
        end
        
        %write activity levels for sample presentation period (epoch 2) and post-sample period (epoch 3) to 1 array
        %write activity levels for test presentation period (epoch 4) and post-test period (epoch 5) to 1 array
        epoch=2;
        samp_act=zeros(length(samp_epochs)-1,length(matarray{cond,epoch}));%list of average activity values from each trial
        for i=1:find(samp_epochs==512)-1%samp_epochs spans 0 to 512 to 912, possibly with subdivisions in between- analyse just 0 to 512 for epoch 2, when calculating samp_act
            for n=1:length(matarray{cond,epoch})
                temp=find(matarray{cond,epoch}{n}<=samp_epochs(i+1));
                temp=find(matarray{cond,epoch}{n}(temp)>samp_epochs(i));
                samp_act(i,n)=length(temp)*1000/((samp_epochs(i+1)-samp_epochs(i)));
            end
        end
        epoch=3;
        isi_act=zeros(length(samp_epochs)-1,length(matarray{cond,epoch}));%list of average activity values from each trial
        for i=find(samp_epochs==512):length(samp_epochs)-1%samp_epochs spans 0 to 512 to 912, possibly with subdivisions in between- analyse just 512 to 912 for epoch 3, when calculating post_samp_act
            for n=1:length(matarray{cond,epoch})
                temp=find(matarray{cond,epoch}{n}<=isi_epochs(i+1));
                temp=find(matarray{cond,epoch}{n}(temp)>samp_epochs(i));
                isi_act(i,n)=length(temp)*1000/((samp_epochs(i+1)-samp_epochs(i)));
            end
        end        
        epoch=4;
        test_act=zeros(length(test_epochs)-1,length(matarray{cond,epoch}));%list of average activity values from each trial
        for i=1:find(test_epochs==1536)-1%test_epochs spans 1024 to 1536 to 1936, possibly with subdivisions in between- analyse just 1024 to 1536 for epoch 4, when calculating test_act
            for n=1:numTrials(cond)
                temp=find(matarray{cond,epoch}{n}<=test_epochs(i+1));
                temp=find(matarray{cond,epoch}{n}(temp)>test_epochs(i));
                test_act(i,n)=length(temp)*1000/((test_epochs(i+1)-test_epochs(i)));
            end
        end
%         epoch=5;
%         for i=find(test_epochs==1536):length(test_epochs)-1%test_epochs spans 1024 to 1536 to 1936, possibly with subdivisions in between- analyse just 1536 to 1936 for epoch 5, when calculating post_test_act
%             for n=1:numTrials(cond)
%                 temp=find(matarray{cond,epoch}{n}<=test_epochs(i+1));
%                 temp=find(matarray{cond,epoch}{n}(temp)>test_epochs(i));
%                 test_act(i,n)=length(temp)*1000/((test_epochs(i+1)-test_epochs(i)));
%             end
%         end
        for i=1:length(test_epochs)-1
            ave_spon_act(i,cond)=mean(spon_act(i,:));
            ave_samp_act(i,cond)=mean(samp_act(i,:));
            ave_isi_act(i,cond)=mean(isi_act(i,:));
            ave_test_act(i,cond)=mean(test_act(i,:));
            if minusSpon==1;
                ave_test_act(i,cond)=ave_test_act(i,cond)-mean(spon_act(1,:));
            end
        end
    end
    if round(ch)~=ch
        CRFmatName=['CRF_Ch',num2str(round(ch)),'_',num2str(10*(ch-round(ch)))];
    else
        CRFmatName=['CRF_Ch',num2str(ch)];
    end
    CRFmatFolder=fullfile('F:','PL','CRF',animal,area);
    if ~exist(CRFmatFolder,'dir')
        mkdir(CRFmatFolder);
    end
    CRFmatPath=fullfile('F:','PL','CRF',animal,area,CRFmatName);
    for i=1:length(test_epochs)-1
        CRFmatTemp=[{session} {test_epochs} ave_test_act(i,:)];
    end
    if ~exist(CRFmatPath,'file')
        CRFmat=CRFmatTemp;
    else
        loadText=['load ',CRFmatPath,'.mat CRFmat'];
        eval(loadText);
        CRFmat=[CRFmat;CRFmatTemp];
    end
    saveText=['save ',CRFmatPath,'.mat CRFmat'];
    eval(saveText);        
end
clear all
