function read_bj_SE_xcorr4skew_ch7_sess336_example_figures
%Written by Xing 16/09/10
%Set the minimum number of trials in this function with ‘mintrials,’ for
%data from a particular session to be included.
%Data in folder: PSTH_xcorr_sm6ms_min40trials_transform
%Transforms data (corr coef values) because the original coef values have a
%negatively (left) skewed distribution, and not possible to calculate CIs
%using non-normally-distributed data.
%Tried various types of transformations and tested for normality with
%lillietest function, also calculated skewness and kurtosis. Found that the
%square root transform does pretty well (after data have undergone a
%preliminary transformation to make them positively skewed), and reduces
%skewness substantially.
%Modified from read_blanco_SE_xcorr4 which performed analysis for each good
%session of each cell (read_blanco_SE_xcorr3 only did it for cell 8, session 359).
%Uses PSTH values as measure of spike activity, runs Xcorr over 2 main stages:
%1. On activity within sessions for each cell, to obtain measure of degree
%of within-session correlation.
%Generates full, 'original' correlation coef by performing corr analysis on
%pairwise comparisons between all trials from that session. Then generates
%numerous other corr coefs using bootstrapped data (~50 - 100 samples of
%half the number of total trials, with replacement). Identifies location of
%'original' corr coef data point within distribution of coefs generated
%from bootstrapped data samples.
%2. On activity across sessions for each cell, to obtain measure of degree
%of within-cell correlation. Performs pairwise comparison between PSTHs
%from 2 sessions at a time, e.g. for middle session vs every other session.
%Probably no need to repeat for all combinations of session pairs- just
%picking 1 session and comparing against the rest could be sufficient.
%Extra 3rd stage
%3. Performs pairings on activity across sessions AND across cells, to
%generate measure for between-cell variability, for comparison with
%within-cell-within-session variability of spike responses.
%Plots all bootstrapped PSTHs on single graph (in black) and original PSTH
%from complete non-repetitive set of trials in red. Saves image to file
%e.g. boot_8_359_PSTHs for cell 8 and session 359.
%Plots histogram of correlation coefficients generated by pairwise
%comparisons between bootstrapped data from 1 session. Saves this initial
%image to file, e.g. boot_8_359_PSTHc. On same graph, draws
%vertical dotted lines at values of x which corresponds to coefs calculated
%between pairs of real PSTH data- between sessions for that cell (in
%green), between cells for all sessions (in blue), and between cells for
%that session (in cyan). Saves image to file, e.g. fullrange_8_359_PSTHc.
%Then restricts range to that covered by values generated from
%within-cell-between-sessions
%analysis. Saves image to file, e.g. bSessrange_8_359_PSTHc.
%Writes values of coefs to file, cDist: 1. ch #, 2. session #, 3. coefs from
%bootstrapped  values for that session, coefs from comparisons between: 4.
%within-cell-between-sessions, 5. across cells across sessions, 6. across
%cells within session.
%Lastly, saves same sets of data to .mat array (just in case), allDist.mat.
%Data-writing convention follows that of text file, with ch # in 1st
%column, session # in 2nd, and the 4 arrays of coef values in 'cell' format
%in the 3rd to 6th columns. Data compiled across good sessions from top to
%bottom row of saved variable 'allDist.'
animal='blanco';
area='v4_1';
minusSpontan=0;
sigma=8;
%combine PSTH activity values across channels and sessions:
if nargin<3 || isempty(channels)
    channels = main_channels(animal,area);
end
if nargin<4 || isempty(sessionNums)
    sessionNums = main_raw_sessions_final(animal,area,[],0);
end
[sampleContrasts allTestContrasts]=area_metadata(area);
highestTestCond=size(allTestContrasts,2);
if minusSpontan==1
    subfolder=['PSTH45_images_sm',num2str(sigma*2),'ms_mspontan_',area];%folder for stimulus-evoked responses minus spontaneous activity levels
elseif minusSpontan==0
    subfolder=['PSTH45_images_sm',num2str(sigma*2),'ms_wspontan_',area];%folder for stimulus-evoked responses without any subtraction of spontaneous activity levels
end
actSessions=[];
for i=1:length(channels)
    for j=1:length(sessionNums)
        for sampleContrastInd=1:length(sampleContrasts)%combine across sample contrasts (if >1) because highest test contrast is always the same (60% in V4, 90% in V1)
            sampleContrast=sampleContrasts(sampleContrastInd);
            matPSTHName=[num2str(channels(i)),'_',num2str(sessionNums(j)),'_',num2str(sampleContrast),'_',area,'_PSTHact.mat'];
            matPSTHPath=fullfile('F:','PL','xcorr',animal,subfolder,matPSTHName);
            if exist(matPSTHPath,'file')
                loadText=['load ',matPSTHPath,' PSTHact'];
                eval(loadText);
                actSessions=[actSessions;channels(i) sessionNums(j) PSTHact];
            end
        end
    end
end

%simply read all .mat array files to tabulate number of good trials for
%each session and cell:
for h=1:length(channels)
    numTrialsPSess=[];%number of trials per session (for condition 14)
    goodSessList=[];
    for j=1:length(sessionNums)
        matarrayTemp4=[];
        for sampleContrastInd=1:length(sampleContrasts)%combine data across sample contrasts
            matName=[num2str(channels(h)),'_',num2str(sessionNums(j)),'_',num2str(sampleContrasts(sampleContrastInd))];
            matPath=fullfile('F:','PL','spikeData',animal,matName);
            loadText=['load ',matPath,' matarray'];
            eval(loadText);
            matarrayTemp4=[matarrayTemp4;matarray{highestTestCond,4}];
        end
        numTrialsPSess=[numTrialsPSess size(matarrayTemp4,1)];
        goodSessList=[goodSessList sessionNums(j)];
    end
    grandTrialsList(h,1:3)=[channels(h) {numTrialsPSess} {goodSessList}];%ch # in first column, list of num of trials per session for cond 14 for good sessions in column 2, list of good, corresponding session #s in column 3
end
matGrandName=['grandTrialsList_',area];
matGrandPath=fullfile('F:','PL','xcorr',animal,subfolder,matGrandName);
saveText=['save ',matGrandPath,' grandTrialsList'];
% eval(saveText);

channels=7;
sessionNums=336;
%generate bootstrapped data for each good session:
numStds=[1.96];
stdDevText=sprintf(': std dev %s',num2str(numStds));
minTrials=30;
epochTimes=[-512 0 512 1024 1536 1936]; 
binwidth=1;%1 ms
bins=epochTimes(4)+binwidth/2:binwidth:epochTimes(4)+512+400-binwidth/2;
numSamp=100;
goodSessCount=1;
for goodSess=1:size(actSessions,1)
    ch=actSessions(goodSess,1);
    session=actSessions(goodSess,2);
    cDist=[];
    matarrayTemp4=[];matarrayTemp5=[];
    for sampleContrastInd=1:length(sampleContrasts)%combine data across sample contrasts
        matName=[num2str(ch),'_',num2str(session),'_',num2str(sampleContrasts(sampleContrastInd))];
        matPath=fullfile('F:','PL','spikeData',animal,matName);
        loadText=['load ',matPath,' matarray'];
        eval(loadText);
        matarrayTemp4=[matarrayTemp4;matarray{highestTestCond,4}];
        matarrayTemp5=[matarrayTemp5;matarray{highestTestCond,5}];
    end
    matarray{highestTestCond,4}=matarrayTemp4;
    matarray{highestTestCond,5}=matarrayTemp5;
    numBootTrials=length(matarray{highestTestCond,4});
    if numBootTrials>=minTrials%if there are at least a certain number of trials per session
        bootPSTHact=zeros(numSamp,length(bins));
        for Nsamp=1:numSamp
            trialsAvailable=min([length(matarray{highestTestCond,4}) length(matarray{highestTestCond,5})]);
            bootTrialInd=unidrnd(trialsAvailable,1,numBootTrials);%generates random numbers (with replacement) for the discrete uniform distribution with maximum N, to analyse trials within cell, across sessions
            for n=1:length(bootTrialInd)
                epoch4act=find(matarray{highestTestCond,4}{bootTrialInd(n)}<=epochTimes(4)+512);%just examine spikes that occur within first 512 ms, disregard the fact that stimulus presentation typically lasted 512 ms
                epoch4act=find(matarray{highestTestCond,4}{bootTrialInd(n)}(epoch4act)>epochTimes(4));
                epoch5act=find(matarray{highestTestCond,5}{bootTrialInd(n)}<=epochTimes(5)+400);
                epoch5act=find(matarray{highestTestCond,5}{bootTrialInd(n)}(epoch5act)>epochTimes(5));
                trialAct=[matarray{highestTestCond,4}{bootTrialInd(n)}(epoch4act) matarray{highestTestCond,5}{bootTrialInd(n)}(epoch5act)];%concatenate time stamps from epochs 4 & 5
                %             spikeTimes=find(trialAct<=epochTimes(1+1));%original code did not carefully exclude time stamps occuring after 1536 ms from epoch 4 array
                %             spikeTimes=find(trialAct(spikeTimes)>epochTimes(1));%now this functions as a double-checker
                %             [N X]=hist(trialAct(spikeTimes),bins);
                [N X]=hist(trialAct,bins);
                if size(N,2)==1
                    N=N';
                end
                bootPSTHact(Nsamp,1:length(N))=bootPSTHact(Nsamp,1:length(N))+N;%tally spikes across randomly-selected trials
            end
            bootPSTHact(Nsamp,:)=bootPSTHact(Nsamp,:)*1000/(binwidth*numBootTrials);%average activity per ms
            bootPSTHact(Nsamp,:)=gaussfit(sigma,0,bootPSTHact(Nsamp,:));%smoothing done for each bootstrapped PSTH
        end
        figure('Color',[1,1,1],'Units', 'Normalized', 'Position',[0.1, 0.3, 0.7, 0.4]);
        maxY=max(max(bootPSTHact));
        for Nsamp=1:numSamp
            plot(bins,bootPSTHact(Nsamp,:),'Color','k');hold on
        end
        for i=1:size(actSessions,1)
            if actSessions(i,1)==ch&&actSessions(i,2)==session
                originalAct=actSessions(i,3:end);
            end
        end
        plot(bins,originalAct,'Color','r','LineWidth',2);hold on
        line([1536 1536],[0 maxY],'LineStyle',':','Color','k');
        set(gca,'XLim',[1024 1936]);
        set(gca,'XTick',[1024 1536 1936]);
        set(gca,'XTickLabel',[0 512 912]);
        set(gca,'YLim',[0 maxY]);
        ptext=sprintf('%s  %s    # of trials per PSTH: %d      # of PSTHs: %d',num2str(ch),num2str(session),numBootTrials,numSamp);
%         text('Position',[1024 1.05*maxY],'FontSize',9,'String',ptext);
        text('Position',[1600 0.95*maxY],'FontSize',16,'String','bootstrapped data','Color','k');
        text('Position',[1600 0.85*maxY],'FontSize',16,'String','original data (full set of trials)','Color','r');
        
        imageName=['boot_',num2str(ch),'_',num2str(session),'_',area,'_PSTHs'];
        imageFolder=fullfile('F:','PL','xcorr',animal,subfolder);
        imagePath=fullfile(imageFolder,imageName);
        printtext=['print -dpng ',imagePath];
        set(gcf,'PaperPositionMode','auto')
%         eval(printtext);
        
        for i=1:size(bootPSTHact,1)-1
            pair1=bootPSTHact(i,:)';
            for j=i+1:size(bootPSTHact,1)
                pair2=bootPSTHact(j,:)';
                coef=corr(pair1,pair2);%returns the cross-correlation sequence
                cDist=[cDist coef];%for each pairwise comparison,compile the value of c in an array
            end
        end
        bootDist={cDist};
        for beforeAndAfter=1:2%before and after transformation
            if beforeAndAfter==2
                %transformedBootDist=max(cDist)-cDist;%do a reversal by subtracting each value from highest value,
                transformedBootDist=1-cDist;%do a reversal by subtracting each value from 1,
                transformedBootDist=sqrt(transformedBootDist);%then take squareroot of the data
                transformedBootDist=1-transformedBootDist;
                bootDist={transformedBootDist};
            end
            minX=min(bootDist{1});maxX=max(bootDist{1});
            [plotDist X]=hist(bootDist{1},minX:(maxX-minX)/100:maxX);
            plotDist=plotDist/numSamp;
            minY=min(plotDist);maxY=max(plotDist);
            figure('Color',[1,1,1],'Units', 'Normalized', 'Position',[0.1, 0.3, 0.7, 0.4]);
%             plot(minX:(maxX-minX)/100:maxX,plotDist,'Color','k');hold on
            bar(minX:(maxX-minX)/100:maxX,plotDist,'FaceColor','w','BarWidth',1,'EdgeColor','k');hold on
            smoothPlotDist=gaussfit(sigma,0,plotDist);
            plot(minX:(maxX-minX)/100:maxX,smoothPlotDist,'Color','r','LineWidth',2);hold on
%             text('Position',[minX 1.05*maxY],'FontSize',9,'String',ptext);
            if beforeAndAfter==2
                text('Position',[(maxX-minX)*0.1+minX 0.95*maxY],'FontSize',16,'String','  binned transformed R-values','Color','k');
            else
                text('Position',[(maxX-minX)*0.1+minX 0.95*maxY],'FontSize',16,'String','  binned non-transformed R-values','Color','k');
            end
            text('Position',[(maxX-minX)*0.1+minX 0.87*maxY],'FontSize',16,'String','- best-fitting Gaussian','Color','r');
            text('Position',[(maxX-minX)*0.1+minX 0.79*maxY],'FontSize',16,'String',': SD = 1.96','Color','k');
            meanX=mean(bootDist{1});
            set(gca,'XLim',[minX maxX]);
            set(gca,'XTick',[minX meanX maxX]);
            set(gca,'XTickLabel',[round(minX*100)/100 round(meanX*100)/100 round(maxX*100)/100]);
%             set(gca,'XLim',[0.7 1]);
%             set(gca,'XTick',[0.7 round(meanX*100)/100 1]);
%             set(gca,'XTickLabel',[0.7 round(meanX*100)/100 1]);
            maxY=max(plotDist);
            line([meanX meanX],[0 maxY],'LineStyle','--','Color','k','LineWidth',2);
            stdC=std(bootDist{1});
            for k=1:length(numStds)
                line([meanX+numStds(k)*stdC meanX+numStds(k)*stdC],[0 maxY],'LineStyle',':','Color','k','LineWidth',2);
                line([meanX-numStds(k)*stdC meanX-numStds(k)*stdC],[0 maxY],'LineStyle',':','Color','k','LineWidth',2);
            end
            set(gca,'YLim',[0 maxY]);
%             text('Position',[1024 1.05*maxY],'FontSize',9,'String',ptext);
            
            imageName=['original_boot_',num2str(ch),'_',num2str(session),'_',area,'_PSTHc'];%before transformation
            if beforeAndAfter==2
                imageName=['trans_boot_',num2str(ch),'_',num2str(session),'_',area,'_PSTHc'];%after transformation
            ylabel('number of occurences');xlabel('transformed R-value');
            else
            ylabel('number of occurences');xlabel('non-transformed R-value');
            end
            imagePath=fullfile(imageFolder,imageName);
            printtext=['print -dpng ',imagePath];
            set(gcf,'PaperPositionMode','auto')
%             eval(printtext);
        end
        
        %calculate corr coefs between this session's original full-data PSTH
        %and those of other sessions:
        figure('Color',[1,1,1],'Units', 'Normalized', 'Position',[0.1, 0.3, 0.7, 0.4]);
%         plot(minX:(maxX-minX)/100:maxX,plotDist,'Color','k');hold on
        smoothPlotDist=gaussfit(sigma,0,plotDist);
        meanX=mean(bootDist{1});
        set(gca,'XLim',[minX maxX]);
        set(gca,'XTick',[minX meanX maxX]);
        set(gca,'XTickLabel',[round(minX*100)/100 round(meanX*100)/100 round(maxX*100)/100]);
        maxY=max(plotDist);
        stdC=std(transformedBootDist);
        set(gca,'YLim',[0 maxY]);
        ylabel('number of occurences');xlabel('transformed correlation coefficient value');
        wCellbSessAct=[];bCellbSessAct=[];bCellwSessAct=[];
        for i=1:size(actSessions,1)%compile PSTH act for other sessions, from same cell
            if actSessions(i,1)==ch&&actSessions(i,2)~=session
                wCellbSessAct=[wCellbSessAct;actSessions(i,3:end)];%within channels between sessions
            end
        end
        for i=1:size(actSessions,1)%compile PSTH act from other cells
            if actSessions(i,1)~=ch
                bCellbSessAct=[bCellbSessAct;actSessions(i,3:end)];%between channels between sessions
            end
        end
        for i=1:size(actSessions,1)%compile PSTH act from other cells, but for same session
            if actSessions(i,1)~=ch&&actSessions(i,2)==session
                bCellwSessAct=[bCellwSessAct;actSessions(i,3:end)];%between channels within sessions
            end
        end
        wCbScDist=[];bCbScDist=[];bCwScDist=[];
        pair1=originalAct';
        for i=1:size(bCellbSessAct,1)%mark coef value for comparisons with other cells & sessions
            pair2=bCellbSessAct(i,:)';
            coef=corr(pair1,pair2);%returns the cross-correlation sequence
            bCbScDist=[bCbScDist coef];%for each pairwise comparison,compile the value of c in an array
        end
        for i=1:size(bCellwSessAct,1)%mark coef value for comparisons with other cells for same session
            pair2=bCellwSessAct(i,:)';
            coef=corr(pair1,pair2);%returns the cross-correlation sequence
            bCwScDist=[bCwScDist coef];%for each pairwise comparison,compile the value of c in an array
        end
        for i=1:size(wCellbSessAct,1)%mark coef value for comparisons with other sessions, from same cell
            pair2=wCellbSessAct(i,:)';
            coef=corr(pair1,pair2);%returns the cross-correlation sequence
            wCbScDist=[wCbScDist coef];%for each pairwise comparison,compile the value of c in an array
        end
        
%         transformedBootDist=max(bCbScDist)-bCbScDist;%another attempt- do a reversal by subtracting each value from highest value,
%         bCbScDist=sqrt(transformedBootDist);%then square the data        
%         transformedBootDist=max(bCwScDist)-bCwScDist;%another attempt- do a reversal by subtracting each value from highest value,
%         bCwScDist=sqrt(transformedBootDist);%then square the data
%         transformedBootDist=max(wCbScDist)-wCbScDist;%another attempt- do a reversal by subtracting each value from highest value,
%         wCbScDist=sqrt(transformedBootDist);%then square the data
        transformedBootDist=1-bCbScDist;%do a reversal by subtracting each value from highest value,
        bCbScDist=sqrt(transformedBootDist);%then square the data
        bCbScDist=1-bCbScDist;        
        transformedBootDist=1-bCwScDist;%another attempt- do a reversal by subtracting each value from highest value,
        bCwScDist=sqrt(transformedBootDist);%then square the data
        bCwScDist=1-bCwScDist;   
        transformedBootDist=1-wCbScDist;%another attempt- do a reversal by subtracting each value from highest value,
        wCbScDist=sqrt(transformedBootDist);%then square the data
        wCbScDist=1-wCbScDist;   
        for i=1:length(bCbScDist)%mark coef value for comparisons with other cells & sessions
            line([bCbScDist(i) bCbScDist(i)],[0 maxY],'LineStyle','-','Color','b');
        end
        for i=1:length(bCwScDist)%mark coef value for comparisons with other cells for same session
            line([bCwScDist(i) bCwScDist(i)],[0 maxY],'LineStyle','-','Color','c');
        end
        for i=1:length(wCbScDist)%mark coef value for comparisons with other sessions, from same cell
            line([wCbScDist(i) wCbScDist(i)],[0 maxY],'LineStyle','-','Color','r');
            text('Position',[wCbScDist(i) 1.02*maxY],'FontSize',10,'String','|','Color','r');
        end
        
        minX2=min([min(wCbScDist) min(bCbScDist) min(bCwScDist)]);
        maxX2=max([max(wCbScDist) max(bCbScDist) max(bCwScDist)]);
        labelsX=sort([minX minX2 meanX maxX maxX2]);
        labelsTextX=sort([minX  meanX maxX ]);
        labelsTextX=round(labelsTextX*100)/100;
        set(gca,'XLim',[labelsX(1) labelsX(end)]);
        set(gca,'XTick',labelsTextX);
        set(gca,'XTickLabel',labelsTextX);
%         text('Position',[labelsX(1) 1.05*maxY],'FontSize',9,'String',ptext);
%         text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.95*maxY],'FontSize',9,'String','v binned transformed coef values','Color','k');
%         text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.95*maxY],'FontSize',16,'String','- best-fitting Gaussian','Color','k');
%         text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.87*maxY],'FontSize',16,'String',': mean','Color','k');
%         text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.79*maxY],'FontSize',16,'String','-- SD = 1.96','Color','k');
%         text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.71*maxY],'FontSize',16,'String','- within cells, between sessions','Color','r');
%         text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.63*maxY],'FontSize',16,'String','- between cells and sessions','Color','b');
%         text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.75*maxY],'FontSize',9,'String',': between cells within sessions','Color','c');

        plot(minX:(maxX-minX)/100:maxX,smoothPlotDist,'Color','k','LineWidth',2);hold on
        line([meanX meanX],[0 maxY],'LineStyle','--','Color','k','LineWidth',2);
        for k=1:length(numStds)
            line([meanX+numStds(k)*stdC meanX+numStds(k)*stdC],[0 maxY],'LineStyle','--','Color','k','LineWidth',2);
            line([meanX-numStds(k)*stdC meanX-numStds(k)*stdC],[0 maxY],'LineStyle','--','Color','k','LineWidth',2);
            text('Position',[meanX+numStds(k)*stdC 1.02*maxY],'FontSize',10,'String','|','Color','k');
            text('Position',[meanX-numStds(k)*stdC 1.02*maxY],'FontSize',10,'String','|','Color','k');
        end
        imageName=['trans_fullrange_',num2str(ch),'_',num2str(session),'_',area,'_PSTHc'];
        imagePath=fullfile(imageFolder,imageName);
        printtext=['print -dpng ',imagePath];
        set(gcf,'PaperPositionMode','auto')
%         eval(printtext);
        
        if ~isempty(wCbScDist)&&min(wCbScDist)~=max(wCbScDist)
            set(gca,'XLim',[min(wCbScDist) max(wCbScDist)]);
            set(gca,'XLim',[min(wCbScDist) max(wCbScDist)]);
            labelsX=sort([min(wCbScDist) meanX max(wCbScDist)]);
            set(gca,'XTick',labelsX);
            set(gca,'XTickLabel',labelsX);
%             text('Position',[labelsX(1) 1.05*maxY],'FontSize',9,'String',ptext);
            text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.95*maxY],'FontSize',16,'String','v binned transformed coef values','Color','k');
            text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.91*maxY],'FontSize',16,'String','- smoothed graph','Color','k');
            text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.87*maxY],'FontSize',16,'String',stdDevText,'Color','k');
            text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.83*maxY],'FontSize',16,'String',': within cells between sessions','Color','r');
            text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.79*maxY],'FontSize',16,'String',': between cells and sessions','Color','b');
            text('Position',[(labelsX(end)-labelsX(1))*0.1+labelsX(1) 0.75*maxY],'FontSize',16,'String',': between cells within sessions','Color','c');        
        end
        imageName=['trans_partrange_',num2str(ch),'_',num2str(session),area,'_PSTHc'];
        imagePath=fullfile(imageFolder,imageName);
        printtext=['print -dpng ',imagePath];
        set(gcf,'PaperPositionMode','auto')
%         eval(printtext);
        
        matDistName=['trans_cDist_',num2str(ch),'_',num2str(session),'_',area];
        matDistPath=fullfile('F:','PL','xcorr',animal,subfolder,matDistName);
        saveText=['save ',matDistPath,' bootDist wCbScDist bCbScDist bCwScDist'];
%         eval(saveText);
        
        trans_allDist(goodSessCount,3)=bootDist;
        trans_allDist(goodSessCount,4)={wCbScDist};
        trans_allDist(goodSessCount,5)={bCbScDist};
        trans_allDist(goodSessCount,6)={bCwScDist};
        trans_allDist{goodSessCount,1}=actSessions(goodSess,1);
        trans_allDist{goodSessCount,2}=actSessions(goodSess,2);   
        goodSessCount=goodSessCount+1;
        close all
    end
end
matDistName=['trans_allDist_',area];
matDistPath=fullfile('F:','PL','xcorr',animal,subfolder,matDistName);
saveText=['save ',matDistPath,' trans_allDist'];
% eval(saveText);

